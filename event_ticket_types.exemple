create table public.event_ticket_types (
  id uuid not null default extensions.uuid_generate_v4 (),
  event_id uuid not null,
  name text not null,
  description text null,
  price numeric(10, 2) not null default 0,
  quantity integer not null default 0,
  available_quantity integer not null default 0,
  min_quantity integer null,
  max_quantity integer null,
  has_half_price boolean null default false,
  sector text null,
  benefits text[] null,
  ticket_type text null default 'paid'::text,
  status text null default 'active'::text,
  sale_start_date timestamp with time zone null,
  sale_end_date timestamp with time zone null,
  stripe_price_id text null,
  created_at timestamp with time zone not null default timezone ('utc'::text, now()),
  updated_at timestamp with time zone not null default timezone ('utc'::text, now()),
  title character varying(45) null,
  price_masculine numeric(10, 2) null default 0,
  price_feminine numeric(10, 2) null default 0,
  sale_period_type character varying(10) null default 'date'::character varying,
  availability character varying(20) null default 'public'::character varying,
  service_fee_type character varying(20) null default 'buyer'::character varying,
  character_limit integer null default 45,
  description_limit integer null default 100,
  transferable boolean null default true,
  max_transfers integer null default 1,
  price_type character varying(20) null default 'unissex'::character varying,
  half_price_title character varying(45) null,
  half_price_quantity integer null default 0,
  half_price_price numeric(10, 2) null,
  half_price_price_feminine numeric(10, 2) null,
  constraint event_ticket_types_pkey primary key (id),
  constraint event_ticket_types_event_id_fkey foreign KEY (event_id) references events (id) on delete CASCADE,
  constraint event_ticket_types_sale_period_type_check check (
    (
      (sale_period_type)::text = any (
        (
          array[
            'date'::character varying,
            'batch'::character varying
          ]
        )::text[]
      )
    )
  ),
  constraint event_ticket_types_service_fee_type_check check (
    (
      (service_fee_type)::text = any (
        (
          array[
            'buyer'::character varying,
            'seller'::character varying
          ]
        )::text[]
      )
    )
  ),
  constraint event_ticket_types_status_check check (
    (
      status = any (
        array[
          'active'::text,
          'inactive'::text,
          'sold_out'::text
        ]
      )
    )
  ),
  constraint event_ticket_types_availability_check check (
    (
      (availability)::text = any (
        (
          array[
            'public'::character varying,
            'restricted'::character varying,
            'manual'::character varying
          ]
        )::text[]
      )
    )
  ),
  constraint event_ticket_types_ticket_type_check check (
    (
      ticket_type = any (array['paid'::text, 'free'::text])
    )
  ),
  constraint event_ticket_types_price_type_check check (
    (
      (price_type)::text = any (
        (
          array[
            'unissex'::character varying,
            'gender_separate'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_event_ticket_types_event_id on public.event_ticket_types using btree (event_id) TABLESPACE pg_default;

create index IF not exists idx_event_ticket_types_status on public.event_ticket_types using btree (status) TABLESPACE pg_default;

create trigger trigger_update_available_quantity BEFORE INSERT
or
update on event_ticket_types for EACH row
execute FUNCTION update_available_quantity ();




🎟️ Finalidade geral

A tabela event_ticket_types define os tipos de ingressos disponíveis para um determinado evento (event_id).
Ou seja: cada linha representa um tipo de ingresso com suas regras de venda, preço, quantidade e restrições.

Exemplo de tipos:

Ingresso VIP Masculino

Ingresso VIP Feminino

Ingresso Meia-entrada

Ingresso Gratuito

Ingresso por lote (batch) ou por período de data

📋 Estrutura explicada por grupos
🔗 Relacionamento principal
event_id uuid not null


Cada tipo de ingresso pertence a um evento da tabela events.

🏷️ Identificação e descrição
name text not null
description text null
title varchar(45)


name: nome do tipo de ingresso (ex: “VIP”, “Pista”, “Camarote”).

description: descrição detalhada.

title: título curto para exibição (até 45 caracteres).

💰 Preço e modalidades
price numeric(10,2)
price_masculine numeric(10,2)
price_feminine numeric(10,2)
price_type varchar(20) default 'unissex'


price: preço padrão.

price_masculine e price_feminine: preços separados por gênero (usado quando price_type = 'gender_separate').

price_type: define se o preço é único (unissex) ou diferente por gênero.

🎫 Quantidades
quantity integer
available_quantity integer
min_quantity integer
max_quantity integer


quantity: total inicial.

available_quantity: quanto ainda resta (atualizado por trigger).

min_quantity e max_quantity: limites por compra.

A trigger update_available_quantity() garante que o campo available_quantity se mantenha coerente com as vendas.

🧾 Meia-entrada (half-price)
has_half_price boolean default false
half_price_title varchar(45)
half_price_quantity integer
half_price_price numeric(10,2)
half_price_price_feminine numeric(10,2)


Permite definir ingressos meia-entrada:

has_half_price: ativa/desativa essa opção.

half_price_*: preço e quantidade reservada.

🪑 Setor e benefícios
sector text
benefits text[]


sector: nome do setor (ex: “Pista”, “Camarote A”, etc.).

benefits: lista de vantagens (ex: { "Bebida grátis", "Acesso ao camarote" }).

⏰ Período de venda
sale_period_type varchar(10) default 'date'
sale_start_date timestamptz
sale_end_date timestamptz


Pode ser controlado por data (date) ou lote (batch).

sale_start_date / sale_end_date: delimitam quando está à venda.

👥 Disponibilidade e acesso
availability varchar(20) default 'public'


public: qualquer pessoa pode comprar.

restricted: somente convidados/autorizados.

manual: venda controlada manualmente (ex: balcão).

⚙️ Taxas e comissões
service_fee_type varchar(20) default 'buyer'


Define quem paga a taxa do serviço:

buyer: comprador paga.

seller: organizador paga.

🏷️ Tipo e status do ingresso
ticket_type text default 'paid'
status text default 'active'


ticket_type: tipo de ingresso:

paid = pago.

free = gratuito.

status:

active = à venda.

inactive = desativado.

sold_out = esgotado.

🔁 Transferência
transferable boolean default true
max_transfers integer default 1


Define se o ingresso pode ser transferido e quantas vezes.

🧠 Limites de texto (UI)
character_limit integer default 45
description_limit integer default 100


Provavelmente usados para limitar o tamanho dos textos exibidos em interfaces.

🕒 Auditoria
created_at timestamptz default timezone('utc', now())
updated_at timestamptz default timezone('utc', now())


Mantém registro de criação e atualização.

🔐 Restrições e validações (CHECK)

Garante que certos campos só aceitam valores válidos:

sale_period_type → 'date' ou 'batch'

service_fee_type → 'buyer' ou 'seller'

status → 'active', 'inactive', 'sold_out'

availability → 'public', 'restricted', 'manual'

ticket_type → 'paid', 'free'

price_type → 'unissex', 'gender_separate'

⚡ Índices

idx_event_ticket_types_event_id: acelera buscas por evento.

idx_event_ticket_types_status: acelera filtros por status.