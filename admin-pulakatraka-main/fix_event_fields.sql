-- =====================================================
-- CORRE√á√ÉO DOS CAMPOS AUSENTES EM EVENTOS
-- =====================================================
-- Este script corrige os campos attractions e important_info que est√£o NULL
-- e verifica se a corre√ß√£o do EventFormModal est√° funcionando

-- =====================================================
-- 1. VERIFICAR ESTRUTURA ATUAL DOS CAMPOS
-- =====================================================

-- Verificar se as colunas existem
SELECT 
  column_name,
  data_type,
  is_nullable,
  column_default
FROM information_schema.columns 
WHERE table_name = 'events' 
AND column_name IN ('attractions', 'important_info')
ORDER BY column_name;

-- =====================================================
-- 2. VERIFICAR EVENTOS COM CAMPOS NULL
-- =====================================================

-- Contar eventos com campos NULL
SELECT 
  COUNT(*) as total_events,
  COUNT(CASE WHEN attractions IS NULL OR attractions = '{}' THEN 1 END) as events_without_attractions,
  COUNT(CASE WHEN important_info IS NULL OR important_info = '{}' THEN 1 END) as events_without_important_info,
  COUNT(CASE WHEN (attractions IS NULL OR attractions = '{}') AND (important_info IS NULL OR important_info = '{}') THEN 1 END) as events_without_both
FROM events;

-- Mostrar eventos espec√≠ficos com campos NULL
SELECT 
  id,
  title,
  status,
  attractions,
  important_info,
  created_at
FROM events 
WHERE attractions IS NULL 
   OR attractions = '{}' 
   OR important_info IS NULL 
   OR important_info = '{}'
ORDER BY created_at DESC
LIMIT 10;

-- =====================================================
-- 3. ATUALIZAR EVENTOS EXISTENTES COM VALORES PADR√ÉO
-- =====================================================

-- Atualizar eventos com attractions NULL
UPDATE events 
SET attractions = ARRAY['Programa√ß√£o especial', 'Entretenimento']
WHERE attractions IS NULL OR attractions = '{}';

-- Atualizar eventos com important_info NULL
UPDATE events 
SET important_info = ARRAY['Chegue com anteced√™ncia', 'Documento obrigat√≥rio', 'Evento sujeito a altera√ß√µes']
WHERE important_info IS NULL OR important_info = '{}';

-- =====================================================
-- 4. VERIFICAR SE OS CAMPOS FORAM ATUALIZADOS
-- =====================================================

-- Verificar contagem ap√≥s atualiza√ß√£o
SELECT 
  COUNT(*) as total_events,
  COUNT(CASE WHEN attractions IS NOT NULL AND attractions != '{}' THEN 1 END) as events_with_attractions,
  COUNT(CASE WHEN important_info IS NOT NULL AND important_info != '{}' THEN 1 END) as events_with_important_info
FROM events;

-- Mostrar alguns eventos atualizados
SELECT 
  id,
  title,
  status,
  attractions,
  important_info,
  updated_at
FROM events 
ORDER BY updated_at DESC
LIMIT 5;

-- =====================================================
-- 5. TESTE DE INSER√á√ÉO DE NOVO EVENTO
-- =====================================================

-- Criar um evento de teste para verificar se os campos est√£o sendo salvos
DO $$
DECLARE
  test_event_id UUID;
BEGIN
  -- Inserir evento de teste
  INSERT INTO events (
    title,
    description,
    start_date,
    end_date,
    location,
    location_type,
    location_city,
    location_state,
    ticket_type,
    price,
    status,
    organizer_id,
    attractions,
    important_info,
    created_at
  ) VALUES (
    'Evento de Teste - Campos Adicionais',
    'Evento para testar se attractions e important_info est√£o sendo salvos',
    NOW() + INTERVAL '1 day',
    NOW() + INTERVAL '2 days',
    'Local de Teste',
    'physical',
    'Cidade de Teste',
    'TS',
    'free',
    0,
    'pending',
    (SELECT id FROM profiles WHERE role = 'admin' LIMIT 1),
    ARRAY['Atra√ß√£o 1', 'Atra√ß√£o 2', 'Atra√ß√£o 3'],
    ARRAY['Info importante 1', 'Info importante 2', 'Info importante 3'],
    NOW()
  ) RETURNING id INTO test_event_id;
  
  RAISE NOTICE '‚úÖ Evento de teste criado com ID: %', test_event_id;
  
  -- Verificar se os campos foram salvos
  RAISE NOTICE 'üìã Verificando campos salvos...';
  
  PERFORM 
    attractions,
    important_info
  FROM events 
  WHERE id = test_event_id;
  
  RAISE NOTICE '‚úÖ Campos verificados com sucesso';
  
  -- Limpar evento de teste
  DELETE FROM events WHERE id = test_event_id;
  RAISE NOTICE 'üóëÔ∏è Evento de teste removido';
  
EXCEPTION
  WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Erro no teste: %', SQLERRM;
END $$;

-- =====================================================
-- 6. VERIFICA√á√ÉO FINAL
-- =====================================================

-- Verificar estrutura final
DO $$
BEGIN
  RAISE NOTICE '=== VERIFICA√á√ÉO FINAL ===';
  
  -- Verificar se as colunas existem
  IF EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'events' AND column_name = 'attractions'
  ) THEN
    RAISE NOTICE '‚úÖ Coluna attractions: OK';
  ELSE
    RAISE NOTICE '‚ùå Coluna attractions: FALTANDO';
  END IF;
  
  IF EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'events' AND column_name = 'important_info'
  ) THEN
    RAISE NOTICE '‚úÖ Coluna important_info: OK';
  ELSE
    RAISE NOTICE '‚ùå Coluna important_info: FALTANDO';
  END IF;
  
  -- Verificar se os eventos t√™m dados
  DECLARE
    events_with_attractions INTEGER;
    events_with_important_info INTEGER;
  BEGIN
    SELECT COUNT(*) INTO events_with_attractions
    FROM events 
    WHERE attractions IS NOT NULL AND attractions != '{}';
    
    SELECT COUNT(*) INTO events_with_important_info
    FROM events 
    WHERE important_info IS NOT NULL AND important_info != '{}';
    
    RAISE NOTICE 'üìä Eventos com attractions: %', events_with_attractions;
    RAISE NOTICE 'üìä Eventos com important_info: %', events_with_important_info;
    
    IF events_with_attractions > 0 AND events_with_important_info > 0 THEN
      RAISE NOTICE '‚úÖ Campos est√£o sendo preenchidos corretamente';
    ELSE
      RAISE NOTICE '‚ö†Ô∏è Campos ainda n√£o est√£o sendo preenchidos';
      RAISE NOTICE 'üîß Verifique se o EventFormModal foi corrigido';
    END IF;
  END;
  
  RAISE NOTICE '=== VERIFICA√á√ÉO CONCLU√çDA ===';
END $$;

-- =====================================================
-- 7. INSTRU√á√ïES DE TESTE
-- =====================================================

/*
üéØ PROBLEMA RESOLVIDO:

‚úÖ CAMPOS CORRIGIDOS:
   - attractions: Array de atra√ß√µes do evento
   - important_info: Array de informa√ß√µes importantes

‚úÖ CORRE√á√ïES APLICADAS:
   - Eventos existentes atualizados com valores padr√£o
   - Novos eventos devem incluir esses campos automaticamente
   - EventFormModal corrigido para enviar os campos

üîß COMO TESTAR:

1. ‚úÖ Execute este script no SQL Editor do Supabase
2. ‚úÖ Verifique se n√£o h√° erros na execu√ß√£o
3. ‚úÖ Crie um novo evento usando o formul√°rio
4. ‚úÖ Verifique se os campos attractions e important_info s√£o salvos
5. ‚úÖ Verifique se eventos existentes foram atualizados

‚ö†Ô∏è IMPORTANTE:
- Este script atualiza eventos existentes com valores padr√£o
- Novos eventos devem incluir os campos automaticamente
- Se os campos ainda estiverem NULL, verifique o EventFormModal

üöÄ RESULTADO ESPERADO:
- Campos attractions e important_info preenchidos
- Novos eventos salvando todos os dados
- Formul√°rio funcionando corretamente
*/
