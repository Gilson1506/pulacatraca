-- =====================================================
-- CORRE√á√ÉO DE ACESSO P√öBLICO AOS EVENTOS
-- =====================================================
-- Este script corrige as pol√≠ticas RLS para permitir que:
-- ‚úÖ Usu√°rios n√£o logados vejam eventos aprovados
-- ‚úÖ Usu√°rios comuns vejam eventos aprovados
-- ‚úÖ Admins mantenham controle total
-- ‚úÖ Organizadores vejam seus pr√≥prios eventos

-- =====================================================
-- 1. REMOVER POL√çTICAS RESTRITIVAS EXISTENTES
-- =====================================================

-- Remover pol√≠ticas que bloqueiam acesso p√∫blico
DO $$
DECLARE
  policy_record RECORD;
BEGIN
  RAISE NOTICE 'üóëÔ∏è Removendo pol√≠ticas RLS restritivas da tabela events...';
  
  -- Listar e remover pol√≠ticas que bloqueiam acesso p√∫blico
  FOR policy_record IN 
    SELECT policyname 
    FROM pg_policies 
    WHERE tablename = 'events'
    AND policyname IN (
      'Admins can read all events',
      'Organizers can view own events'
    )
  LOOP
    EXECUTE 'DROP POLICY IF EXISTS "' || policy_record.policyname || '" ON events';
    RAISE NOTICE '   ‚úÖ Pol√≠tica removida: %', policy_record.policyname;
  END LOOP;
  
  RAISE NOTICE '‚úÖ Pol√≠ticas restritivas foram removidas';
END $$;

-- =====================================================
-- 2. CRIAR POL√çTICAS RLS CORRETAS PARA ACESSO P√öBLICO
-- =====================================================

-- Pol√≠tica para TODOS verem eventos APROVADOS (acesso p√∫blico)
CREATE POLICY "Public can view approved events" ON events
FOR SELECT USING (
  status = 'approved'
);

-- Pol√≠tica para usu√°rios logados verem seus pr√≥prios eventos (qualquer status)
CREATE POLICY "Users can view own events" ON events
FOR SELECT USING (
  auth.uid() IS NOT NULL 
  AND organizer_id = auth.uid()
);

-- Pol√≠tica para admins verem TODOS os eventos (qualquer status)
CREATE POLICY "Admins can read all events" ON events
FOR SELECT USING (is_admin());

-- Pol√≠tica para organizadores verem seus pr√≥prios eventos (qualquer status)
CREATE POLICY "Organizers can view own events" ON events
FOR SELECT USING (
  EXISTS (
    SELECT 1 FROM profiles 
    WHERE profiles.id = auth.uid() 
    AND profiles.role = 'organizer'
    AND profiles.id = events.organizer_id
  )
);

-- =====================================================
-- 3. MANTER POL√çTICAS DE ESCRITA (ADMIN E ORGANIZADORES)
-- =====================================================

-- Pol√≠tica para admins atualizarem TODOS os eventos (incluindo aprova√ß√£o e carrossel)
-- (Esta pol√≠tica j√° deve existir, mas vamos garantir)
DROP POLICY IF EXISTS "Admins can update all events" ON events;
CREATE POLICY "Admins can update all events" ON events
FOR UPDATE USING (is_admin());

-- Pol√≠tica para admins inserirem eventos
-- (Esta pol√≠tica j√° deve existir, mas vamos garantir)
DROP POLICY IF EXISTS "Admins can insert events" ON events;
CREATE POLICY "Admins can insert events" ON events
FOR INSERT WITH CHECK (is_admin());

-- Pol√≠tica para admins deletarem eventos
-- (Esta pol√≠tica j√° deve existir, mas vamos garantir)
DROP POLICY IF EXISTS "Admins can delete events" ON events;
CREATE POLICY "Admins can delete events" ON events
FOR DELETE USING (is_admin());

-- Pol√≠tica para organizadores editarem seus pr√≥prios eventos (apenas rascunhos)
-- (Esta pol√≠tica j√° deve existir, mas vamos garantir)
DROP POLICY IF EXISTS "Organizers can update own draft events" ON events;
CREATE POLICY "Organizers can update own draft events" ON events
FOR UPDATE USING (
  EXISTS (
    SELECT 1 FROM profiles 
    WHERE profiles.id = auth.uid() 
    AND profiles.role = 'organizer'
    AND profiles.id = events.organizer_id
    AND events.status = 'draft'
  )
);

-- Pol√≠tica para organizadores inserirem eventos
-- (Esta pol√≠tica j√° deve existir, mas vamos garantir)
DROP POLICY IF EXISTS "Organizers can insert events" ON events;
CREATE POLICY "Organizers can insert events" ON events
FOR INSERT WITH CHECK (
  EXISTS (
    SELECT 1 FROM profiles 
    WHERE profiles.id = auth.uid() 
    AND profiles.role = 'organizer'
    AND profiles.id = events.organizer_id
  )
);

-- =====================================================
-- 4. VERIFICAR POL√çTICAS CRIADAS
-- =====================================================

-- Listar todas as pol√≠ticas da tabela events
SELECT 
  policyname,
  cmd,
  CASE 
    WHEN cmd = 'SELECT' THEN 'üìñ Leitura'
    WHEN cmd = 'INSERT' THEN '‚ûï Inser√ß√£o'
    WHEN cmd = 'UPDATE' THEN '‚úèÔ∏è Atualiza√ß√£o'
    WHEN cmd = 'DELETE' THEN 'üóëÔ∏è Exclus√£o'
    ELSE cmd
  END as operacao,
  qual as condicao
FROM pg_policies 
WHERE tablename = 'events'
ORDER BY cmd, policyname;

-- =====================================================
-- 5. TESTE DE ACESSO P√öBLICO
-- =====================================================

-- Verificar se eventos aprovados s√£o vis√≠veis publicamente
DO $$
DECLARE
  approved_count INTEGER;
  total_count INTEGER;
BEGIN
  RAISE NOTICE '=== TESTE DE ACESSO P√öBLICO ===';
  
  -- Contar eventos aprovados
  SELECT COUNT(*) INTO approved_count
  FROM events 
  WHERE status = 'approved';
  
  -- Contar total de eventos
  SELECT COUNT(*) INTO total_count
  FROM events;
  
  RAISE NOTICE 'üìä Total de eventos: %', total_count;
  RAISE NOTICE 'üìä Eventos aprovados: %', approved_count;
  
  IF approved_count > 0 THEN
    RAISE NOTICE '‚úÖ Eventos aprovados dispon√≠veis para acesso p√∫blico';
  ELSE
    RAISE NOTICE '‚ö†Ô∏è Nenhum evento aprovado encontrado';
    RAISE NOTICE 'üîß Aprove alguns eventos primeiro para testar o acesso p√∫blico';
  END IF;
END $$;

-- =====================================================
-- 6. INSTRU√á√ïES DE TESTE
-- =====================================================

/*
üéØ POL√çTICAS RLS CONFIGURADAS:

‚úÖ ACESSO P√öBLICO:
   - Qualquer pessoa pode ver eventos com status = 'approved'
   - Usu√°rios n√£o logados conseguem acessar a p√°gina inicial
   - Eventos aprovados aparecem na listagem p√∫blica

‚úÖ ACESSO DE USU√ÅRIOS LOGADOS:
   - Usu√°rios veem seus pr√≥prios eventos (qualquer status)
   - Organizadores veem seus pr√≥prios eventos
   - Admins veem todos os eventos

‚úÖ CONTROLE ADMINISTRATIVO:
   - Admins podem aprovar/rejeitar eventos
   - Admins podem gerenciar carrossel
   - Admins podem editar qualquer evento

üîß COMO TESTAR:

1. ‚úÖ Execute este script no SQL Editor do Supabase
2. ‚úÖ Verifique se n√£o h√° erros na execu√ß√£o
3. ‚úÖ Acesse a aplica√ß√£o principal sem estar logado
4. ‚úÖ Verifique se os eventos aprovados aparecem na p√°gina inicial
5. ‚úÖ Fa√ßa login como usu√°rio comum e verifique acesso
6. ‚úÖ Fa√ßa login como admin e teste funcionalidades administrativas

‚ö†Ô∏è IMPORTANTE:
- Este script N√ÉO remove funcionalidades administrativas
- Apenas corrige o acesso p√∫blico aos eventos
- Mant√©m toda a seguran√ßa para opera√ß√µes de escrita
- Usu√°rios n√£o logados s√≥ veem eventos aprovados

üöÄ RESULTADO ESPERADO:
- P√°gina inicial funcionando para visitantes
- Eventos aprovados vis√≠veis publicamente
- Admin app funcionando normalmente
- Seguran√ßa mantida para opera√ß√µes cr√≠ticas
*/
