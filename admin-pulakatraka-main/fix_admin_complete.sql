-- =====================================================
-- CORRE√á√ÉO COMPLETA DO ADMIN APP - APROVA√á√ÉO E EDI√á√ÉO DE EVENTOS
-- =====================================================
-- Este script corrige TODOS os problemas identificados:
-- ‚úÖ Aprova√ß√£o de eventos
-- ‚úÖ Aprova√ß√£o de carrossel  
-- ‚úÖ Edi√ß√£o de eventos
-- ‚úÖ Pol√≠ticas RLS para admins
-- ‚úÖ Triggers conflitantes
-- ‚úÖ Colunas ausentes

-- =====================================================
-- 1. LIMPEZA E PREPARA√á√ÉO
-- =====================================================

-- Remover todos os triggers conflitantes da tabela events
DROP TRIGGER IF EXISTS events_updated_at ON events;
DROP TRIGGER IF EXISTS on_update_events ON events;
DROP TRIGGER IF EXISTS trigger_validate_event_edit ON events;
DROP TRIGGER IF EXISTS update_events_updated_at ON events;
DROP TRIGGER IF EXISTS events_update_trigger ON events;
DROP TRIGGER IF EXISTS events_validation_trigger ON events;

-- =====================================================
-- 2. REMOVER TODAS AS POL√çTICAS RLS EXISTENTES
-- =====================================================

-- Remover TODAS as pol√≠ticas existentes da tabela events para evitar conflitos
DO $$
DECLARE
  policy_record RECORD;
BEGIN
  RAISE NOTICE 'üóëÔ∏è Removendo pol√≠ticas RLS existentes da tabela events...';
  
  -- Listar e remover todas as pol√≠ticas existentes
  FOR policy_record IN 
    SELECT policyname 
    FROM pg_policies 
    WHERE tablename = 'events'
  LOOP
    EXECUTE 'DROP POLICY IF EXISTS "' || policy_record.policyname || '" ON events';
    RAISE NOTICE '   ‚úÖ Pol√≠tica removida: %', policy_record.policyname;
  END LOOP;
  
  RAISE NOTICE '‚úÖ Todas as pol√≠ticas RLS foram removidas da tabela events';
END $$;

-- =====================================================
-- 3. ADICIONAR COLUNAS AUSENTES NA TABELA EVENTS
-- =====================================================

-- Adicionar colunas para funcionalidades de carrossel
ALTER TABLE events 
ADD COLUMN IF NOT EXISTS carousel_approved BOOLEAN DEFAULT false,
ADD COLUMN IF NOT EXISTS carousel_priority INTEGER DEFAULT 0;

-- Adicionar colunas para modera√ß√£o de eventos
ALTER TABLE events 
ADD COLUMN IF NOT EXISTS reviewed_at TIMESTAMP WITH TIME ZONE,
ADD COLUMN IF NOT EXISTS rejection_reason TEXT;

-- Adicionar colunas para auditoria (se n√£o existirem)
ALTER TABLE events 
ADD COLUMN IF NOT EXISTS updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW();

-- =====================================================
-- 4. CRIAR FUN√á√ÉO is_admin() NECESS√ÅRIA
-- =====================================================

CREATE OR REPLACE FUNCTION is_admin()
RETURNS BOOLEAN AS $$
BEGIN
  -- Verificar se o usu√°rio est√° autenticado
  IF auth.uid() IS NULL THEN
    RETURN FALSE;
  END IF;
  
  -- Verificar se o usu√°rio √© admin
  RETURN EXISTS (
    SELECT 1 
    FROM profiles 
    WHERE id = auth.uid() 
    AND role = 'admin'
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- =====================================================
-- 5. CRIAR FUN√á√ÉO PARA ATUALIZAR UPDATED_AT
-- =====================================================

CREATE OR REPLACE FUNCTION update_events_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = timezone('utc'::text, now());
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- =====================================================
-- 6. CRIAR TRIGGER √öNICO E OTIMIZADO
-- =====================================================

-- Trigger para atualizar updated_at automaticamente
CREATE TRIGGER events_updated_at_trigger
  BEFORE UPDATE ON events
  FOR EACH ROW
  EXECUTE FUNCTION update_events_updated_at();

-- =====================================================
-- 7. CRIAR POL√çTICAS RLS CORRETAS PARA ADMINS
-- =====================================================

-- Pol√≠tica para admins lerem TODOS os eventos
CREATE POLICY "Admins can read all events" ON events
FOR SELECT USING (is_admin());

-- Pol√≠tica para admins atualizarem TODOS os eventos (incluindo aprova√ß√£o e carrossel)
CREATE POLICY "Admins can update all events" ON events
FOR UPDATE USING (is_admin());

-- Pol√≠tica para admins inserirem eventos
CREATE POLICY "Admins can insert events" ON events
FOR INSERT WITH CHECK (is_admin());

-- Pol√≠tica para admins deletarem eventos
CREATE POLICY "Admins can delete events" ON events
FOR DELETE USING (is_admin());

-- Pol√≠tica para organizadores verem seus pr√≥prios eventos
CREATE POLICY "Organizers can view own events" ON events
FOR SELECT USING (
  EXISTS (
    SELECT 1 FROM profiles 
    WHERE profiles.id = auth.uid() 
    AND profiles.role = 'organizer'
    AND profiles.id = events.organizer_id
  )
);

-- Pol√≠tica para organizadores editarem seus pr√≥prios eventos (apenas rascunhos)
CREATE POLICY "Organizers can update own draft events" ON events
FOR UPDATE USING (
  EXISTS (
    SELECT 1 FROM profiles 
    WHERE profiles.id = auth.uid() 
    AND profiles.role = 'organizer'
    AND profiles.id = events.organizer_id
    AND events.status = 'draft'
  )
);

-- Pol√≠tica para organizadores inserirem eventos
CREATE POLICY "Organizers can insert events" ON events
FOR INSERT WITH CHECK (
  EXISTS (
    SELECT 1 FROM profiles 
    WHERE profiles.id = auth.uid() 
    AND profiles.role = 'organizer'
    AND profiles.id = events.organizer_id
  )
);

-- =====================================================
-- 8. CRIAR √çNDICES PARA PERFORMANCE
-- =====================================================

-- √çndices para as novas colunas de carrossel
CREATE INDEX IF NOT EXISTS idx_events_carousel_approved ON events(carousel_approved);
CREATE INDEX IF NOT EXISTS idx_events_carousel_priority ON events(carousel_priority);
CREATE INDEX IF NOT EXISTS idx_events_reviewed_at ON events(reviewed_at);
CREATE INDEX IF NOT EXISTS idx_events_status ON events(status);
CREATE INDEX IF NOT EXISTS idx_events_organizer_id ON events(organizer_id);

-- =====================================================
-- 9. VERIFICAR E CORRIGIR TABELA PROFILES
-- =====================================================

-- Verificar se a coluna role existe na tabela profiles
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'profiles' AND column_name = 'role'
  ) THEN
    ALTER TABLE profiles ADD COLUMN role TEXT DEFAULT 'user' CHECK (role IN ('admin', 'organizer', 'user'));
    RAISE NOTICE '‚úÖ Coluna role adicionada √† tabela profiles';
  ELSE
    RAISE NOTICE '‚ö†Ô∏è Coluna role j√° existe na tabela profiles';
  END IF;
END $$;

-- Habilitar RLS na tabela profiles se n√£o estiver habilitado
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

-- Remover pol√≠ticas existentes da tabela profiles para evitar conflitos
DO $$
DECLARE
  policy_record RECORD;
BEGIN
  RAISE NOTICE 'üóëÔ∏è Removendo pol√≠ticas RLS existentes da tabela profiles...';
  
  -- Listar e remover todas as pol√≠ticas existentes
  FOR policy_record IN 
    SELECT policyname 
    FROM pg_policies 
    WHERE tablename = 'profiles'
  LOOP
    EXECUTE 'DROP POLICY IF EXISTS "' || policy_record.policyname || '" ON profiles';
    RAISE NOTICE '   ‚úÖ Pol√≠tica removida: %', policy_record.policyname;
  END LOOP;
  
  RAISE NOTICE '‚úÖ Todas as pol√≠ticas RLS foram removidas da tabela profiles';
END $$;

-- Pol√≠tica para admins gerenciarem todos os perfis
CREATE POLICY "Admins can read all profiles" ON profiles
FOR SELECT USING (is_admin());

CREATE POLICY "Admins can update all profiles" ON profiles
FOR UPDATE USING (is_admin());

-- Pol√≠tica para usu√°rios verem seu pr√≥prio perfil
CREATE POLICY "Users can view own profile" ON profiles
FOR SELECT USING (auth.uid() = id);

-- Pol√≠tica para usu√°rios atualizarem seu pr√≥prio perfil
CREATE POLICY "Users can update own profile" ON profiles
FOR UPDATE USING (auth.uid() = id);

-- =====================================================
-- 10. HABILITAR RLS NA TABELA EVENTS
-- =====================================================

ALTER TABLE events ENABLE ROW LEVEL SECURITY;

-- =====================================================
-- 11. VERIFICA√á√ÉO FINAL
-- =====================================================

-- Verificar se todas as colunas necess√°rias existem
DO $$
BEGIN
  RAISE NOTICE '=== VERIFICA√á√ÉO FINAL ===';
  
  -- Verificar colunas de carrossel
  IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'events' AND column_name = 'carousel_approved') THEN
    RAISE NOTICE '‚úÖ carousel_approved: OK';
  ELSE
    RAISE NOTICE '‚ùå carousel_approved: FALTA';
  END IF;
  
  IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'events' AND column_name = 'carousel_priority') THEN
    RAISE NOTICE '‚úÖ carousel_priority: OK';
  ELSE
    RAISE NOTICE '‚ùå carousel_priority: FALTA';
  END IF;
  
  -- Verificar colunas de modera√ß√£o
  IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'events' AND column_name = 'reviewed_at') THEN
    RAISE NOTICE '‚úÖ reviewed_at: OK';
  ELSE
    RAISE NOTICE '‚ùå reviewed_at: FALTA';
  END IF;
  
  IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'events' AND column_name = 'rejection_reason') THEN
    RAISE NOTICE '‚úÖ rejection_reason: OK';
  ELSE
    RAISE NOTICE '‚ùå rejection_reason: FALTA';
  END IF;
  
  RAISE NOTICE '=== VERIFICA√á√ÉO CONCLU√çDA ===';
END $$;

-- Verificar triggers criados
SELECT 
  trigger_name,
  event_manipulation,
  action_timing,
  action_statement
FROM information_schema.triggers 
WHERE event_object_table = 'events'
ORDER BY trigger_name;

-- Verificar pol√≠ticas RLS criadas
SELECT 
  schemaname,
  tablename,
  policyname,
  permissive,
  roles,
  cmd,
  qual,
  with_check
FROM pg_policies 
WHERE tablename = 'events'
ORDER BY policyname;

-- =====================================================
-- 12. INSTRU√á√ïES DE USO
-- =====================================================

/*
üéØ FUNCIONALIDADES RESTAURADAS:

‚úÖ APROVA√á√ÉO DE EVENTOS:
   - Admins podem alterar status para 'approved'
   - Campo reviewed_at √© preenchido automaticamente
   - Campo reviewed_by registra quem aprovou

‚úÖ APROVA√á√ÉO DE CARROSSEL:
   - Campo carousel_approved para ativar/desativar
   - Campo carousel_priority para ordena√ß√£o
   - Admins podem gerenciar visibilidade

‚úÖ EDI√á√ÉO DE EVENTOS:
   - Admins podem editar qualquer evento
   - Organizadores podem editar apenas rascunhos
   - Campo updated_at √© atualizado automaticamente

‚úÖ POL√çTICAS DE SEGURAN√áA:
   - RLS habilitado e configurado
   - Admins t√™m acesso total
   - Usu√°rios comuns t√™m acesso limitado

üîß COMO TESTAR:

1. Execute este script no SQL Editor do Supabase
2. Verifique se n√£o h√° erros na execu√ß√£o
3. Teste a aprova√ß√£o de um evento pendente
4. Teste a ativa√ß√£o/desativa√ß√£o do carrossel
5. Teste a edi√ß√£o de informa√ß√µes do evento

‚ö†Ô∏è IMPORTANTE:
- Este script N√ÉO altera dados existentes
- Apenas adiciona funcionalidades ausentes
- Mant√©m toda a estrutura atual da tabela events
- Corrige problemas de permiss√£o e triggers

üöÄ RESULTADO ESPERADO:
- Admin app funcionando perfeitamente
- Aprova√ß√£o de eventos funcionando
- Carrossel funcionando
- Edi√ß√£o de eventos funcionando
- Sem erros de permiss√£o ou triggers
*/
