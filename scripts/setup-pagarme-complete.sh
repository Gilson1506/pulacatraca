#!/bin/bash

# ========================================
# üöÄ CONFIGURA√á√ÉO COMPLETA DO PAGAR.ME
# ========================================
# Script para configurar integra√ß√£o Pagar.me
# Usa npx para garantir disponibilidade do Supabase CLI
# ========================================

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir com cores
print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_header() {
    echo -e "${PURPLE}üéØ $1${NC}"
    echo "====================================="
}

print_section() {
    echo -e "${CYAN}üìã $1${NC}"
    echo "-------------------------------------"
}

# Fun√ß√£o para verificar se comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Fun√ß√£o para executar comando com npx se necess√°rio
run_supabase() {
    if command_exists supabase; then
        supabase "$@"
    else
        npx supabase "$@"
    fi
}

# Fun√ß√£o para aguardar confirma√ß√£o do usu√°rio
confirm_action() {
    local message="$1"
    echo -e "${YELLOW}$message${NC}"
    read -p "Continuar? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_error "Opera√ß√£o cancelada pelo usu√°rio"
        exit 1
    fi
}

# Fun√ß√£o para limpar tela
clear_screen() {
    clear
    echo -e "${PURPLE}üöÄ CONFIGURA√á√ÉO COMPLETA DO PAGAR.ME${NC}"
    echo "====================================="
    echo ""
}

# Fun√ß√£o principal
main() {
    clear_screen
    
    print_header "VERIFICANDO PR√â-REQUISITOS"
    
    # Verificar se Node.js est√° instalado
    if ! command_exists node; then
        print_error "Node.js n√£o est√° instalado!"
        echo "Instale o Node.js em: https://nodejs.org/"
        exit 1
    fi
    
    print_status "Node.js encontrado: $(node --version)"
    
    # Verificar se npm est√° dispon√≠vel
    if ! command_exists npm; then
        print_error "npm n√£o est√° dispon√≠vel!"
        exit 1
    fi
    
    print_status "npm encontrado: $(npm --version)"
    
    # Verificar se npx est√° dispon√≠vel
    if ! command_exists npx; then
        print_error "npx n√£o est√° dispon√≠vel!"
        exit 1
    fi
    
    print_status "npx encontrado: $(npx --version)"
    
    echo ""
    
    # PASSO 1: Verificar status atual
    print_header "PASSO 1: VERIFICANDO STATUS ATUAL"
    
    print_info "Listando functions atuais..."
    run_supabase functions list
    
    echo ""
    confirm_action "Verificou as functions atuais? Pode continuar?"
    echo ""
    
    # PASSO 2: Remover functions antigas do Stripe
    print_header "PASSO 2: REMOVENDO FUNCTIONS ANTIGAS DO STRIPE"
    
    local stripe_functions=(
        "create-checkout-session"
        "create-event-product"
        "create-payment-intent"
        "create-subscription"
        "get-customer-portal"
        "refund-payment"
        "stripe-webhook"
    )
    
    for func in "${stripe_functions[@]}"; do
        print_info "Removendo $func..."
        if run_supabase functions delete "$func" --yes 2>/dev/null; then
            print_status "$func removida com sucesso"
        else
            print_warning "$func n√£o encontrada ou j√° removida"
        fi
    done
    
    echo ""
    print_status "Todas as functions antigas foram processadas"
    echo ""
    
    # PASSO 3: Verificar remo√ß√£o
    print_header "PASSO 3: VERIFICANDO REMO√á√ÉO"
    
    print_info "Listando functions ap√≥s remo√ß√£o..."
    run_supabase functions list
    
    echo ""
    confirm_action "Verificou que as functions antigas foram removidas? Pode continuar?"
    echo ""
    
    # PASSO 4: Deploy das novas functions do Pagar.me
    print_header "PASSO 4: DEPLOY DAS NOVAS FUNCTIONS DO PAGAR.ME"
    
    local pagarme_functions=(
        "process-payment"
        "get-payment-status"
        "cancel-payment"
    )
    
    for func in "${pagarme_functions[@]}"; do
        print_info "Deploy $func..."
        if run_supabase functions deploy "$func"; then
            print_status "$func deployada com sucesso"
        else
            print_error "Erro ao fazer deploy de $func"
            confirm_action "Continuar mesmo com erro em $func?"
        fi
        echo ""
    done
    
    echo ""
    print_status "Deploy das functions conclu√≠do"
    echo ""
    
    # PASSO 5: Verificar deploy
    print_header "PASSO 5: VERIFICA√á√ÉO FINAL"
    
    print_info "Listando functions ap√≥s deploy..."
    run_supabase functions list
    
    echo ""
    confirm_action "Verificou que as novas functions foram deployadas? Pode continuar?"
    echo ""
    
    # PASSO 6: Configurar chave do Pagar.me
    print_header "PASSO 6: CONFIGURAR CHAVE DO PAGAR.ME"
    
    echo -e "${YELLOW}‚ö†Ô∏è  IMPORTANTE: Voc√™ precisar√° da sua chave API secreta do Pagar.me!${NC}"
    echo ""
    
    read -p "üîë Digite sua chave API do Pagar.me: " -s PAGARME_API_KEY
    echo ""
    
    if [ -z "$PAGARME_API_KEY" ]; then
        print_error "Chave API n√£o pode estar vazia!"
        exit 1
    fi
    
    print_info "Configurando chave do Pagar.me..."
    if run_supabase secrets set PAGARME_API_KEY="$PAGARME_API_KEY"; then
        print_status "Chave do Pagar.me configurada com sucesso"
    else
        print_error "Erro ao configurar chave do Pagar.me"
        exit 1
    fi
    
    echo ""
    print_info "Secrets configurados:"
    run_supabase secrets list
    
    echo ""
    confirm_action "Verificou que a chave foi configurada? Pode continuar?"
    echo ""
    
    # PASSO 7: Limpar pastas antigas
    print_header "PASSO 7: LIMPANDO PASTAS ANTIGAS"
    
    local FUNCTIONS_DIR="supabase/functions"
    
    if [ ! -d "$FUNCTIONS_DIR" ]; then
        print_warning "Diret√≥rio $FUNCTIONS_DIR n√£o encontrado"
    else
        local old_folders=(
            "create-checkout-session"
            "create-event-product"
            "create-payment-intent"
            "create-subscription"
            "get-customer-portal"
            "refund-payment"
            "stripe-webhook"
        )
        
        for folder in "${old_folders[@]}"; do
            local full_path="$FUNCTIONS_DIR/$folder"
            if [ -d "$full_path" ]; then
                print_info "Removendo pasta $folder..."
                rm -rf "$full_path"
                print_status "$folder removida"
            else
                print_warning "$folder n√£o encontrada"
            fi
        done
        
        echo ""
        print_info "Pastas restantes:"
        ls -la "$FUNCTIONS_DIR"
    fi
    
    echo ""
    confirm_action "Verificou que as pastas antigas foram removidas? Pode continuar?"
    echo ""
    
    # PASSO 8: Resumo final
    print_header "CONFIGURA√á√ÉO COMPLETA!"
    
    echo -e "${GREEN}üéâ PARAB√âNS! Configura√ß√£o conclu√≠da com sucesso!${NC}"
    echo ""
    echo "‚úÖ Functions antigas do Stripe REMOVIDAS"
    echo "‚úÖ Functions novas do Pagar.me DEPLOYADAS"
    echo "‚úÖ Chave do Pagar.me CONFIGURADA"
    echo "‚úÖ Pastas antigas LIMPAS"
    echo "‚úÖ Sistema pronto para uso!"
    echo ""
    
    print_section "PR√ìXIMOS PASSOS"
    echo "1. üß™ Testar as functions no frontend"
    echo "2. üîó Configurar webhooks se necess√°rio"
    echo "3. üí≥ Testar pagamentos com cart√£o e PIX"
    echo "4. üìö Consultar documenta√ß√£o: README_ARQUITETURA_SEGURA.md"
    echo ""
    
    print_section "SCRIPTS DISPON√çVEIS"
    echo "üìÅ Pasta scripts/ cont√©m:"
    echo "   - setup-pagarme-complete.sh (este script)"
    echo "   - setup-pagarme-windows.ps1 (PowerShell)"
    echo "   - remove-stripe-functions.sh (limpeza Stripe)"
    echo "   - cleanup-old-folders.sh (limpeza pastas)"
    echo ""
    
    print_section "TESTE R√ÅPIDO"
    echo "Para testar se tudo est√° funcionando:"
    echo "1. V√° para a pasta do projeto"
    echo "2. Execute: npm run dev"
    echo "3. Teste o checkout com cart√£o ou PIX"
    echo ""
    
    echo -e "${GREEN}üöÄ Sistema Pagar.me configurado e pronto para uso!${NC}"
    echo ""
}

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo "Uso: $0 [op√ß√µes]"
    echo ""
    echo "Op√ß√µes:"
    echo "  -h, --help     Mostra esta ajuda"
    echo "  -y, --yes      Executa sem confirma√ß√µes (modo autom√°tico)"
    echo "  -v, --version  Mostra vers√£o do script"
    echo ""
    echo "Exemplos:"
    echo "  $0              # Execu√ß√£o interativa"
    echo "  $0 --yes        # Execu√ß√£o autom√°tica"
    echo "  $0 --help       # Mostra ajuda"
    echo ""
}

# Fun√ß√£o para mostrar vers√£o
show_version() {
    echo "setup-pagarme-complete.sh v1.0.0"
    echo "Configurador completo para integra√ß√£o Pagar.me"
    echo "Compat√≠vel com Supabase + React + Vite"
}

# Fun√ß√£o para modo autom√°tico
auto_mode() {
    echo -e "${YELLOW}ü§ñ MODO AUTOM√ÅTICO ATIVADO${NC}"
    echo "Todas as confirma√ß√µes ser√£o respondidas automaticamente com 'sim'"
    echo ""
    
    # Redefinir fun√ß√£o confirm_action para modo autom√°tico
    confirm_action() {
        local message="$1"
        echo -e "${YELLOW}$message${NC}"
        echo -e "${GREEN}‚úÖ Resposta autom√°tica: SIM${NC}"
        return 0
    }
}

# Processar argumentos da linha de comando
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--version)
            show_version
            exit 0
            ;;
        -y|--yes)
            auto_mode
            shift
            ;;
        *)
            print_error "Op√ß√£o desconhecida: $1"
            show_help
            exit 1
            ;;
    esac
done

# Verificar se est√° sendo executado no diret√≥rio correto
if [ ! -f "package.json" ] && [ ! -d "supabase" ]; then
    print_error "Este script deve ser executado no diret√≥rio raiz do projeto!"
    echo "Certifique-se de estar na pasta que cont√©m package.json e supabase/"
    exit 1
fi

# Executar fun√ß√£o principal
main "$@"
