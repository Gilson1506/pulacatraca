/**
 * Teste do servi√ßo de gera√ß√£o de card hash
 * Execute este arquivo para testar a implementa√ß√£o
 */

import frontendCardHashService from './frontendCardHashService';

// Dados de teste (cart√£o de teste do Pagar.me)
const testCardData = {
  number: '4111111111111111', // Visa de teste
  holder_name: 'Jo√£o Silva',
  exp_month: 12,
  exp_year: 2025,
  cvv: '123'
};

async function testCardHashGeneration() {
  console.log('üß™ Iniciando teste de gera√ß√£o de card hash...');
  
  try {
    // Teste 1: Valida√ß√£o de dados
    console.log('\n1Ô∏è‚É£ Testando valida√ß√£o de dados...');
    
    const isValidNumber = frontendCardHashService.validateCardNumber(testCardData.number);
    console.log('‚úÖ N√∫mero do cart√£o v√°lido:', isValidNumber);
    
    const brand = frontendCardHashService.getCardBrand(testCardData.number);
    console.log('‚úÖ Bandeira identificada:', brand);
    
    const isValidCVV = frontendCardHashService.validateCVV(testCardData.cvv, brand);
    console.log('‚úÖ CVV v√°lido:', isValidCVV);
    
    const isValidExpiry = frontendCardHashService.validateExpiry(testCardData.exp_month, testCardData.exp_year);
    console.log('‚úÖ Data de expira√ß√£o v√°lida:', isValidExpiry);
    
    // Teste 2: Formata√ß√£o
    console.log('\n2Ô∏è‚É£ Testando formata√ß√£o...');
    
    const formattedNumber = frontendCardHashService.formatCardNumber(testCardData.number);
    console.log('‚úÖ N√∫mero formatado:', formattedNumber);
    
    const formattedExpiry = frontendCardHashService.formatExpiry('1225');
    console.log('‚úÖ Data formatada:', formattedExpiry);
    
    // Teste 3: Gera√ß√£o de card hash
    console.log('\n3Ô∏è‚É£ Testando gera√ß√£o de card hash...');
    
    const cardHash = await frontendCardHashService.generateCardHash(testCardData);
    console.log('‚úÖ Card hash gerado:', cardHash);
    console.log('‚úÖ Tamanho do hash:', cardHash.length);
    console.log('‚úÖ Preview do hash:', cardHash.substring(0, 10) + '...');
    
    console.log('\nüéâ Todos os testes passaram com sucesso!');
    
  } catch (error) {
    console.error('\n‚ùå Erro no teste:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

// Teste de valida√ß√£o de chaves
function testConfiguration() {
  console.log('\nüîß Testando configura√ß√£o...');
  
  try {
    frontendCardHashService.validatePublicKey();
    console.log('‚úÖ Public key configurada corretamente');
  } catch (error) {
    console.error('‚ùå Erro na public key:', error.message);
  }
  
  try {
    frontendCardHashService.validateEncryptionKey();
    console.log('‚úÖ Encryption key configurada corretamente');
  } catch (error) {
    console.error('‚ùå Erro na encryption key:', error.message);
  }
}

// Executar testes
if (typeof window !== 'undefined') {
  // No navegador
  window.testCardHash = testCardHashGeneration;
  window.testConfig = testConfiguration;
  
  console.log('üß™ Testes carregados! Execute no console:');
  console.log('- testConfig() - para testar configura√ß√£o');
  console.log('- testCardHash() - para testar gera√ß√£o de hash');
} else {
  // No Node.js
  testConfiguration();
  testCardHashGeneration();
}

export { testCardHashGeneration, testConfiguration };

